#Create docker file with this as the base docker image.
FROM centos:centos6.6
MAINTAINER Vijaypal Singh <s.vijaypal@gmail.com>

# -----------------------------------------------------------------------------
# configuring user
# -----------------------------------------------------------------------------
USER root

# -----------------------------------------------------------------------------
# Import the Centos-6 RPM GPG key to prevent warnings and Add EPEL Repository
# -----------------------------------------------------------------------------
RUN rpm --import http://mirror.centos.org/centos/RPM-GPG-KEY-CentOS-6 \
	&& rpm --import http://dl.fedoraproject.org/pub/epel/RPM-GPG-KEY-EPEL-6 \
	&& rpm -Uvh http://dl.fedoraproject.org/pub/epel/6/x86_64/epel-release-6-8.noarch.rpm
#RUN rpm -ivh http://dl.fedoraproject.org/pub/epel/6/i386/epel-release-6-8.noarch.rpm

# -----------------------------------------------------------------------------
# Base Install
# -----------------------------------------------------------------------------
RUN yum -y install \
	vim-minimal \
	sudo \
	openssh \
	openssh-server \
	openssh-clients \
	python-pip \
	ntp \
	&& yum -y update bash \
	&& rm -rf /var/cache/yum/* \
	&& yum clean all
#yum -y install wget

# -----------------------------------------------------------------------------
# NTP Install
# -----------------------------------------------------------------------------
RUN echo "NETWORKING=yes" > /etc/sysconfig/network
RUN cp -p /usr/share/zoneinfo/UTC /etc/localtime
RUN ntpdate -s pool.ntp.org
ADD etc/services-config/ntp/ntp.conf /etc/ntp.conf
RUN chkconfig ntpdate on
RUN chkconfig ntpd on

# -----------------------------------------------------------------------------
# Create user admin 
# Create password for user root as password1
# -----------------------------------------------------------------------------
RUN useradd -g wheel admin
RUN echo 'admin:password1' | chpasswd
RUN echo -e '\n%wheel ALL=(ALL) ALL' >> /etc/sudoers

# -----------------------------------------------------------------------------
# SSH configuration
# -----------------------------------------------------------------------------
ADD etc/services-config/ssh/authorized_keys /authorized_keys
RUN mkdir /var/run/sshd
RUN mkdir -p /admin/.ssh
RUN chmod 700 /admin/.ssh
RUN mv /authorized_keys /admin/.ssh/.
RUN chmod 600 /admin/.ssh/*
RUN chown -Rf admin:wheel /admin/.ssh
#RUN mkdir /etc/ssh/
#RUN touch /etc/ssh/sshd_config
# configure sshd to allow authentication via password
RUN sed -i.bak 's/#PasswordAuthentication no/PasswordAuthentication yes/' /etc/ssh/sshd_config
RUN rm /etc/ssh/sshd_config.bak
# SSH login fix. Otherwise user is kicked off after login
RUN sed 's@session\s*required\s*pam_loginuid.so@session optional pam_loginuid.so@g' -i /etc/pam.d/sshd
ENV NOTVISIBLE "in users profile"
RUN echo "export VISIBLE=now" >> /etc/profile
USER admin
RUN ssh-keygen -b 2048 -t rsa -f /tmp/sshkey -q -N ""
USER root

# -----------------------------------------------------------------------------
# Java Install
# -----------------------------------------------------------------------------
 
RUN mkdir /opt/java
ADD etc/jdk-7u72-linux-x64.tar.gz /opt/java/

# change dir to Java installation dir
WORKDIR /opt/java/
 
# setup environment variables
RUN update-alternatives --install /usr/bin/javac javac /opt/java/jdk1.7.0_72/bin/javac 100
RUN update-alternatives --install /usr/bin/java java /opt/java/jdk1.7.0_72/bin/java 100
RUN update-alternatives --display java
ENV JAVA_HOME /opt/java/jdk1.7.0_72/
RUN java -version

# -----------------------------------------------------------------------------
# Install supervisord (required to run more than a single process in a container)
# Note: EPEL package lacks /usr/bin/pidproxy
# We require supervisor-stdout to allow output of services started by 
# supervisord to be easily inspected with "docker logs".
# -----------------------------------------------------------------------------
RUN pip install --upgrade 'pip >= 1.4, < 1.5' \
	&& pip install --upgrade supervisor supervisor-stdout \
	&& mkdir -p /var/log/supervisor/

# -----------------------------------------------------------------------------
# Make the custom configuration directory
# -----------------------------------------------------------------------------
RUN mkdir -p /etc/supervisor
ADD etc/services-config/supervisor/supervisord.conf /etc/supervisor/
RUN ln -sf /etc/supervisor/supervisord.conf /etc/supervisord.conf

# -----------------------------------------------------------------------------
# Copy files into place
# -----------------------------------------------------------------------------
ADD etc/bootstrap.sh /etc/
ADD etc/bootstrap.sh /etc/bootstrap.sh
RUN chown root:root /etc/bootstrap.sh
RUN chmod 700 /etc/bootstrap.sh
ENV BOOTSTRAP /etc/bootstrap.sh

# -----------------------------------------------------------------------------
# Expose required ports
# -----------------------------------------------------------------------------
EXPOSE 22

CMD ["/etc/bootstrap.sh", "-bash"]
